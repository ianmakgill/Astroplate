---
import ImageMod from "@/components/ImageMod.astro";
import Base from "@/layouts/Base.astro";
import { getListPage } from "@/lib/contentParser.astro";
import { markdownify } from "@/lib/utils/textConverter";
import CallToAction from "@/partials/CallToAction.astro";
import Testimonial from "@/partials/Testimonial.astro";
import { FaCheck } from "react-icons/fa";

const homepage = await getListPage("homepage", "-index");
const call_to_action = await getListPage("ctaSection", "call-to-action");
const testimonial = await getListPage("testimonialSection", "testimonial");


const { banner, features } = homepage.data;
---

<Base>
  <!-- Banner -->
  <section class="section pt-14">
    <div class="container">
      <div class="row justify-center">
        <div class="lg:col-7 md:col-9 mb-8 text-center">
          <h1
            set:html={markdownify(banner.title)}
            class="mb-4 text-h3 lg:text-h1"
          />
          <h5 set:html={markdownify(banner.content)} class="mb-8" />
          {
            banner.button.enable && (
              <a
                class="btn btn-primary btn-lg"
                href={banner.button.link}
                target={
                  banner.button.link.startsWith("http") ? "_blank" : "_self"
                }
                rel="noopener"
              >
                {banner.button.label}
              </a>
            )
          }
          <p set:html={markdownify(banner.button.subtitle)} class="mb-8" />
        </div>
        {
          banner.image && (
            <div class="col-12">
              <ImageMod
                src={banner.image}
                height={380}
                width={1200}
                alt="banner"
                format="webp"
              />
            </div>
          )
        }
      </div>
    </div>
  </section>
  <!-- /Banner -->

  <!-- Features -->
  {
    features.map((feature, index: number) => (
      <section class={`feature-scroll-section relative overflow-visible ${index % 2 === 0 && "bg-gradient"}`} style="min-height: 120vh;">
        <div class="container">
          <div class="row items-stretch justify-between" style="min-height: 120vh;">
            <div
              class={`feature-image mb:md-0 mb-6 md:col-7 relative right-0 md:absolute md:inset-y-0 md:right-0 md:w-1/2
                flex items-center justify-center transition-opacity duration-300
                ${feature.image_side === "right" && "md:order-2"}`}
            >
              <ImageMod
                src={feature.image}
                height={1500}
                width={1600}
                alt={feature.title}
                class="w-full h-auto object-contain"
                format="webp"
              />
            </div>
            <div class={`md:col-5 lg:col-6 ${index % 2 !== 0 && "md:order-1"}`}>
              <div class="feature-text-container">
                <div class="feature-text-wrapper transition-opacity duration-300">
                  <h2 set:html={markdownify(feature.title)} class="mb-4" />
                  <p set:html={markdownify(feature.content)} class="mb-8 text-lg" />
                  <ul>
                    {feature.bulletpoints.map((bullet: string) => (
                      <li class="relative mb-4 pl-6">
                        <FaCheck className={"absolute left-0 top-1.5"} />
                        <span set:html={markdownify(bullet)} />
                      </li>
                    ))}
                  </ul>
                  {feature.button.enable && (
                    <a class="btn btn-primary mt-5" href={feature.button.link}>
                      {feature.button.label}
                    </a>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>
    ))
  }
  <!-- /Features -->

  <Testimonial testimonial={testimonial} />
  <CallToAction call_to_action={call_to_action} />
</Base>

<script>
  import { initFeatureScrollAnimations } from '@/lib/scrollAnimations';

  // Ensure DOM is ready before initializing
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      initFeatureScrollAnimations();
    });
  } else {
    initFeatureScrollAnimations();
  }
</script>
