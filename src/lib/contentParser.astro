---
import {
  getCollection,
  type CollectionEntry,
  type CollectionKey,
  type ContentEntryMap,
} from "astro:content";

import config from "@/config/config.json";
import languages from "@/config/language.json";

export const getSinglePage = async <C extends CollectionKey>(
  collectionName: C,
  lang: keyof ContentEntryMap | undefined,
): Promise<CollectionEntry<C>[]> => {
  const { default_language } = config.settings;

  // If lang is undefined, use the default language
  const selectedLanguageCode = lang || default_language;

  const language = languages.find(
    (l: any) => l.languageCode === selectedLanguageCode,
  );

  if (!language) {
    throw new Error("Language not found");
  }

  const { contentDir } = language;

  // Explicitly define the type of pages to CollectionEntry<C>[]
  const pages: CollectionEntry<C>[] = (await getCollection(
    contentDir as any,
    ({ id }: any) => {
      return id.startsWith(collectionName) && !id.endsWith("-index.md");
    },
  )) as CollectionEntry<C>[];

  // @ts-ignore
  const removeDrafts = pages.filter((data) => !data.data.draft);

  return removeDrafts;
};

export const getListPage = async <C extends CollectionKey>(
  collectionName: C,
  lang: keyof ContentEntryMap | undefined,
): Promise<CollectionEntry<C>[]> => {
  const { default_language } = config.settings;

  // If lang is undefined, use the default language
  const selectedLanguageCode = lang || default_language;

  const language = languages.find(
    (l: any) => l.languageCode == selectedLanguageCode,
  );

  if (!language) {
    throw new Error("Language not found");
  }

  const { contentDir } = language;

  // Fetch the collection based on the language
  const pages: CollectionEntry<C>[] = (await getCollection(
    contentDir as any,
    ({ id }: any) => {
      return id.startsWith(collectionName);
    },
  )) as CollectionEntry<C>[];

  return pages;
};
---
